<?php 

================================================================================
                    NATAN-PHP FRAMEWORK - PROMPT COMPLETO V2
================================================================================

PROMPT PARA EJECUTAR EN OTRO EQUIPO
CONVERSACIÓN COMPLETA DEL PROYECTO
FECHA: 28 de octubre de 2025
VERSIÓN: 2.0 - Estructura Simple e Innovadora

================================================================================
                            INSTRUCCIONES DE USO
================================================================================

Copia este prompt completo y pégalo en tu nuevo equipo para continuar el proyecto.
El asistente implementará todo el framework basado en estas especificaciones.

================================================================================
                            PROMPT COMPLETO V2
================================================================================

Hola, necesito tu ayuda para crear un framework PHP MVC completo desde cero llamado **NATAN-PHP**. 
Este es un proyecto educativo para un curso. Aquí están todas las especificaciones y requerimientos 
que hemos definido con una estructura moderna, simple pero innovadora:

## CONTEXTO DEL PROYECTO

Estoy creando un curso de cómo desarrollar un framework PHP MVC desde cero. El framework debe ser 
educativo, pero funcional y completo. Se llama **NatanPHP** y debe diferenciarse de Laravel 
con una estructura más simple y clara.

## ESTRUCTURA INNOVADORA SIMPLIFICADA

### Filosofía: "Simplicidad con Propósito"

A diferencia de Laravel que mezcla todo en `app/`, NatanPHP separa claramente por **función** 
pero de manera **simple**:

```
natan-php/
├── 🧠 core/                    # El cerebro del framework (como Laravel Core)
│   ├── Router.php              # Sistema de rutas
│   ├── Database.php            # Conexión y ORM
│   ├── View.php                # Motor de plantillas
│   ├── Request.php             # Manejo de requests
│   └── Console.php             # Sistema de comandos
├── 🏠 app/                     # Tu aplicación (como Laravel pero organizado)
│   ├── Web/                    # TODO lo relacionado con WEB
│   │   ├── Controllers/        # Controladores web
│   │   └── Views/              # Vistas y plantillas
│   ├── Api/                    # TODO lo relacionado con API
│   │   ├── Controllers/        # Controladores API
│   │   └── Resources/          # Transformadores JSON
│   ├── Shared/                 # Compartido entre Web y API
│   │   ├── Models/             # Modelos de datos
│   │   ├── Services/           # Lógica de negocio
│   │   └── Middleware/         # Middleware compartido
│   └── Database/               # Base de datos
│       ├── migrations/         # Migraciones
│       └── seeds/              # Datos de prueba
├── 📁 public/                  # Punto de entrada
│   ├── index.php               # Bootstrap
│   └── assets/                 # CSS, JS, imágenes
├── 🛣️ routes/                  # Rutas separadas y claras
│   ├── web.php                 # Rutas web
│   └── api.php                 # Rutas API
├── ⚙️ config/                  # Configuración simple
│   ├── app.php                 # App principal
│   ├── database.php            # Base de datos
│   └── cache.php               # Caché
├── 📦 storage/                 # Almacenamiento
│   ├── cache/                  # Cache de vistas y datos
│   ├── logs/                   # Logs del sistema
│   └── uploads/                # Archivos subidos
├── natan                       # Comando CLI (ejecutable)
├── composer.json               # Dependencias
├── .env.example                # Variables de entorno
└── README.md                   # Documentación
```

## DIFERENCIAS CLAVE CON LARAVEL

### 1. **Separación Web/Api clara**
```bash
# Laravel: Todo mezclado en app/
app/Http/Controllers/UserController.php     # ¿Web o API? 🤔

# NatanPHP: Separación clara
app/Web/Controllers/UserController.php      # Definitivamente WEB 🌐
app/Api/Controllers/UserController.php      # Definitivamente API 🚀
```

### 2. **Core más simple y educativo**
```bash
# Laravel: Carpetas complicadas
vendor/laravel/framework/src/Illuminate/...  # Muy complejo

# NatanPHP: Core directo y educativo
core/Router.php                              # ¡Puedes leer el código!
core/Database.php                            # ¡Entiendes cómo funciona!
```

### 3. **Comando personalizado "natan"**
```bash
# Laravel
php artisan make:controller UserController

# NatanPHP  
php natan create controller User             # Más natural
php natan create model User --web           # Especifica si es web
php natan create crud Product --api         # O si es API
```

## CARACTERÍSTICAS PRINCIPALES REQUERIDAS

### 1. ARQUITECTURA MVC
- Sistema de rutas dinámicas con parámetros (ej: /producto/{id}, /usuario/{nombre})
- Controladores separados para Web y API
- Modelos con ORM personalizado (Active Record pattern)
- Vistas con motor de plantillas personalizado

### 2. SISTEMA DE RUTAS
- Sintaxis similar a Laravel: $router->get('/productos', 'ProductController@index')
- Soporte para parámetros dinámicos: /producto/{id}, /usuario/{nombre}/perfil
- Rutas agrupadas con prefijos y middleware
- Método resource() para CRUD automático
- Archivos separados: routes/web.php y routes/api.php

### 3. MOTOR DE PLANTILLAS PERSONALIZADO
- Sintaxis tipo Blade de Laravel (no usar Twig ni Plates)
- Variables: {{ $variable }} con escape automático
- Variables sin escape: {!! $html !!}
- Estructuras de control: @if, @foreach, @while, @for
- Herencia de layouts: @extends, @section, @yield
- Inclusiones: @include
- Helpers: @isset, @empty, @auth, @guest
- Push/stack: @push, @stack
- Helpers de vistas: @asset, @url, @csrf, @method

### 4. ORM COMPLETO
- Active Record pattern como Laravel
- Sintaxis: User::find(1), User::where('active', 1)->get()
- Métodos: create(), save(), delete(), update()
- Relaciones: hasMany(), belongsTo(), belongsToMany()
- Query Builder con joins, where, orderBy, limit
- Paginación: Model::paginate(10) exacto como Laravel
- Mass assignment con fillable/guarded
- Timestamps automáticos
- Mutators y Accessors

### 5. SISTEMA DE COMANDOS CLI "NATAN"
- Nombre del comando: "natan" (NO artisan como Laravel, NO maker)
- Comandos requeridos:
  * php natan create controller ProductController --web
  * php natan create controller ProductController --api
  * php natan create model Product (crea automáticamente migración base)
  * php natan create migration create_products_table
  * php natan field add Product (asistente interactivo para agregar campos)
  * php natan field modify Product email (modificar campo existente)
  * php natan field drop Product age (eliminar campo)
  * php natan table describe Product (ver estructura de tabla)
  * php natan migrate (ejecutar migraciones)
  * php natan migrate:rollback (revertir migración)
  * php natan create crud Product --web (genera controlador web, modelo y vistas)
  * php natan create crud Product --api (genera controlador API con endpoints JSON)
  * php natan create crud Product --full (genera web + API)
  * php natan create crud Product --interactive (asistente completo interactivo)

=== COMANDOS DE CONFIGURACIÓN DE PROYECTO ===

  * php natan project mode web (configura proyecto solo para web)
  * php natan project mode api (configura proyecto solo para API)
  * php natan project mode full (proyecto completo web + API)
  * php natan project optimize (limpia archivos no utilizados)
  * php natan routes list
  * php natan serve

### 6. SISTEMA DE MIGRACIONES INTERACTIVO
- Migración automática al crear modelo: php natan create model User (crea migración base)
- Asistente interactivo de campos: php natan field add User
  * Pregunta tipo de campo (string, text, integer, decimal, boolean, etc.)
  * Pregunta longitud, si puede ser NULL, si es único, si tiene índice
  * Pregunta valor por defecto
  * Genera Schema Builder automáticamente (NO SQL crudo)
  * Actualiza automáticamente migración y modelo (fillable)
- Modificación de campos: php natan field modify User email
- Eliminación de campos: php natan field drop User age
- Visualización de estructura: php natan table describe User
- Detección automática de relaciones (foreign_id genera métodos en modelo)
- Sugerencias inteligentes (email sugiere único e índice)
- Schema Builder como Laravel: $table->string('name')->unique()->nullable()
- Cross-database: Mismo código funciona en MySQL, PostgreSQL, SQLite
- Tipos soportados: id(), string(), text(), integer(), decimal(), boolean(), date(), timestamp(), json(), enum(), foreignId()

### 7. FUNCIONALIDADES ADICIONALES
- Variables de entorno con archivo .env
- Sistema de caché básico
- Helpers globales (asset(), url(), old(), csrf_token(), etc.)
- Página de bienvenida automática en la ruta /
- Sistema de validación básico
- Manejo de errores
- Middleware básico
- Autoloading PSR-4

## ESPECIFICACIONES TÉCNICAS

### Tecnologías:
- PHP 8.0+
- Composer para autoloading
- PDO para base de datos
- Motor de plantillas propio (no librerías externas)
- Variables de entorno con vlucas/phpdotenv

## EJEMPLOS DE FLUJO INTERACTIVO

### Crear modelo con migración:
```bash
php natan create model User
```

### Agregar campos interactivamente:
```bash
php natan field add User

# Flujo interactivo:
Campo #1:
Nombre del campo: name
Tipo: 1 (string)
Longitud [255]: 255
¿Puede ser NULL? [y/N]: N

Campo #2:
Nombre del campo: email  
Tipo: 1 (string)
Longitud [255]: 255
¿Puede ser NULL? [y/N]: N
¿Es único? [y/N]: y

Campo #3:
Nombre del campo: age
Tipo: 3 (integer)
¿Puede ser NULL? [y/N]: y
¿Valor por defecto? [y/N]: y
Valor: 0

✅ Migración actualizada automáticamente
✅ Modelo actualizado (fillable fields)
```

### Ver estructura:
```bash
php natan table describe User

| Campo      | Tipo         | NULL | Clave | Default |
|------------|--------------|------|-------|---------|
| id         | INT          | NO   | PRI   | AI      |
| name       | VARCHAR(255) | NO   |       |         |
| email      | VARCHAR(255) | NO   | UNI   |         |
| age        | INT          | YES  |       | 0       |
| created_at | TIMESTAMP    | NO   |       | CURRENT |
| updated_at | TIMESTAMP    | NO   |       | CURRENT |
```

### Mapeo automático de modelos:
```php
// app/Shared/Models/User.php (generado automáticamente)
class User extends Model {
    protected $table = 'users'; // Automático: User -> users
    protected $fillable = ['name', 'email', 'age']; // Auto-generado
    
    // Si se detecta category_id, se genera automáticamente:
    public function category() {
        return $this->belongsTo(Category::class);
    }
}
```

### Rutas Web (routes/web.php):
```php
$router->get('/', 'WelcomeController@index');
$router->get('/productos', 'ProductController@index');
$router->get('/producto/{id}', 'ProductController@show');
$router->resource('/products', 'ProductController');
```

### Rutas API (routes/api.php):
```php
$router->get('/products', 'ProductController@index');
$router->get('/products/{id}', 'ProductController@show');
$router->post('/products', 'ProductController@store');
$router->put('/products/{id}', 'ProductController@update');
$router->delete('/products/{id}', 'ProductController@destroy');
```

### Controlador Web:
```php
// app/Web/Controllers/ProductController.php
class ProductController extends Controller {
    public function index() {
        $products = Product::paginate(10);
        return $this->view('products.index', compact('products'));
    }
}
```

### Controlador API:
```php
// app/Api/Controllers/ProductController.php
class ProductController extends ApiController {
    public function index() {
        $products = Product::paginate(10);
        return $this->jsonResponse($products);
    }
}
```

### Modelo:
```php
// app/Shared/Models/Product.php
class Product extends Model {
    protected $fillable = ['name', 'price', 'description'];
    
    public function category() {
        return $this->belongsTo(Category::class);
    }
}
```

### Vista Web (app/Web/Views/products/index.natan.php):
```php
@extends('layouts.app')

@section('content')
<h1>Productos</h1>
@foreach($products->items() as $product)
    <div>{{ $product->name }} - ${{ $product->price }}</div>
@endforeach
{{ $products->links() }}
@endsection
```

### Comandos principales:
```bash
php natan create crud Product --web      # Solo funcionalidad web
php natan create crud Product --api      # Solo funcionalidad API
php natan create crud Product --full     # Web + API
php natan create controller UserController --web  
php natan create model User
php natan field add User --interactive
```

## CARACTERÍSTICAS ESPECIALES

1. **Separación Clara Web/API**: Controladores y vistas organizados por función
2. **Paginación como Laravel**: Product::paginate(10) con links() en vistas
3. **Motor de plantillas compilado**: Cache de vistas compiladas
4. **Helpers globales**: Disponibles en PHP y vistas
5. **CRUD automático**: Un comando genera controlador + modelo + vistas según tipo
6. **Página de bienvenida**: Al instalar muestra info del framework
7. **URLs amigables**: Con .htaccess automático
8. **Core educativo**: Código del framework visible y comprensible

## PROGRESIÓN DEL DESARROLLO

Implementar en este orden:
1. Estructura básica y autoloading con nueva organización
2. Sistema de rutas con parámetros
3. Controladores base para Web y API
4. Motor de plantillas personalizado
5. Conexión a base de datos
6. ORM con Active Record
7. Query Builder y relaciones
8. Sistema de paginación
9. Comandos CLI (natan)
10. Helpers y utilidades
11. Sistema de caché
12. Archivos de ejemplo

## OBJETIVOS EDUCATIVOS

- Enseñar cómo funcionan los frameworks internamente
- Mostrar patrones de diseño (Active Record, MVC, Factory)
- Explicar autoloading, namespaces y PSR-4
- Demostrar compilación de plantillas
- Enseñar construcción de query builders
- Mostrar implementación de paginación
- Enseñar separación clara de responsabilidades (Web vs API)

## DIFERENCIACIÓN

- Estructura más simple y clara que Laravel
- Separación explícita Web/API desde el inicio
- Motor de plantillas propio (no Twig/Plates)
- Comando "natan" (no artisan)
- Core educativo y visible
- Enfoque educativo y explicativo
- Código limpio y comentado
- Progresión incremental

================================================================================
                        SISTEMA DE COMANDOS NATAN
================================================================================

El sistema de comandos incluye:

### Comandos de Creación:
- php natan create controller ProductController --web
- php natan create controller ProductController --api  
- php natan create model Product
- php natan create migration create_products_table
- php natan create crud Product --web
- php natan create crud Product --api
- php natan create crud Product --full

### Comandos de Base de Datos:
- php natan field add Product
- php natan field modify Product email
- php natan field drop Product age
- php natan table describe Product
- php natan migrate
- php natan migrate:rollback

### Comandos de Proyecto:
- php natan project mode web
- php natan project mode api
- php natan project mode full
- php natan project optimize

### Comandos de Utilidad:
- php natan routes list
- php natan serve
- php natan install

================================================================================
                        MOTOR DE PLANTILLAS PERSONALIZADO
================================================================================

Sintaxis soportada (igual que versión anterior):

Variables:
{{ $variable }}           // Con escape automático
{!! $html !!}            // Sin escape

Estructuras de control:
@if($condicion)
    <p>Contenido</p>
@elseif($otra)
    <p>Otra condición</p>
@else
    <p>Por defecto</p>
@endif

Loops:
@foreach($items as $item)
    <div>{{ $item->nombre }}</div>
@endforeach

Herencia:
@extends('layouts.app')

@section('contenido')
    <h1>Contenido</h1>
@endsection

Helpers de vistas:
@asset('css/app.css')
@url('productos')
@csrf
@method('PUT')

================================================================================
                        ORM COMPLETO CON PAGINACIÓN
================================================================================

Funcionalidades del ORM (igual que versión anterior):

=== Consultas Básicas ===
$users = User::all();
$user = User::find(1);
$users = User::where('active', 1)->get();

=== Creación y Actualización ===
$user = User::create([
    'name' => 'Juan',
    'email' => 'juan@example.com'
]);

=== Relaciones ===
class User extends Model {
    public function posts() {
        return $this->hasMany(Post::class);
    }
}

=== Paginación ===
$users = User::paginate(10);

// En la vista web
@foreach($users->items() as $user)
    <div>{{ $user->name }}</div>
@endforeach
{{ $users->links() }}

// En API
return $this->jsonResponse($users);

================================================================================
                            HELPERS GLOBALES
================================================================================

Los helpers incluyen (igual que versión anterior):

=== URL y Assets ===
asset('css/app.css')                    // /assets/css/app.css
url('productos')                        // /productos

=== Formularios ===
csrf_field()                            // Token CSRF
method_field('PUT')                     // Method spoofing

=== Utilidades ===
dd($variable)                           // Debug y salir
config('app.name')                      // Configuración
env('APP_DEBUG')                        // Variable de entorno

================================================================================
                        INSTALACIÓN Y CONFIGURACIÓN
================================================================================

=== Instalación paso a paso ===

1. Crear proyecto:
mkdir mi-proyecto-natan
cd mi-proyecto-natan

2. Inicializar:
php natan install

3. Configurar base de datos en .env

4. Crear primera migración:
php natan create migration create_users_table

5. Crear primer modelo y controlador:
php natan create model User
php natan create controller UserController --web

6. Crear CRUD completo:
php natan create crud Product --full

7. Servidor de desarrollo:
php natan serve

================================================================================
                        EJEMPLOS DE USO CON NUEVA ESTRUCTURA
================================================================================

=== Crear un módulo web completo ===

1. Generar CRUD web:
php natan create crud Product --web

2. Esto crea:
- app/Shared/Models/Product.php
- app/Web/Controllers/ProductController.php
- app/Web/Views/products/index.natan.php
- app/Web/Views/products/show.natan.php
- app/Web/Views/products/create.natan.php
- app/Web/Views/products/edit.natan.php
- Rutas en routes/web.php

=== Crear un módulo API completo ===

1. Generar CRUD API:
php natan create crud Product --api

2. Esto crea:
- app/Shared/Models/Product.php (si no existe)
- app/Api/Controllers/ProductController.php
- app/Api/Resources/ProductResource.php
- Rutas en routes/api.php

=== Crear módulo completo (Web + API) ===

1. Generar CRUD completo:
php natan create crud Product --full

2. Esto crea AMBOS: todos los archivos web + todos los archivos API

================================================================================
                        CARACTERÍSTICAS AVANZADAS
================================================================================

=== Middleware compartido ===
// app/Shared/Middleware/AuthMiddleware.php
class AuthMiddleware {
    public function handle($request, $next) {
        if (!auth()) {
            return redirect('/login');
        }
        return $next($request);
    }
}

=== Servicios compartidos ===
// app/Shared/Services/ProductService.php
class ProductService {
    public function createProduct($data) {
        return Product::create($data);
    }
}

=== API Resources ===
// app/Api/Resources/ProductResource.php
class ProductResource {
    public function transform($product) {
        return [
            'id' => $product->id,
            'name' => $product->name,
            'price' => number_format($product->price, 2)
        ];
    }
}

================================================================================
                        CONFIGURACIÓN DE PROYECTO
================================================================================

=== Modos de proyecto ===

**Modo Web Only:**
```bash
php natan project mode web
```
- Elimina carpeta app/Api/
- Elimina routes/api.php
- Optimiza para aplicaciones web tradicionales

**Modo API Only:**
```bash
php natan project mode api
```
- Elimina carpeta app/Web/
- Elimina routes/web.php
- Optimiza para APIs REST

**Modo Full:**
```bash
php natan project mode full
```
- Mantiene ambas carpetas
- Funcionalidad completa Web + API

================================================================================
                            CONCLUSIÓN
================================================================================

**NatanPHP Framework V2** incluye todas las características modernas de un framework PHP con una estructura innovadora y simple:

✅ **Arquitectura clara**: Separación explícita Web/API
✅ **Core educativo**: Código del framework visible y comprensible  
✅ **MVC completo**: Con separación de responsabilidades
✅ **ORM con relaciones**: Active Record pattern
✅ **Sistema de plantillas**: Motor propio tipo Blade
✅ **Paginación**: Como Laravel
✅ **Comandos CLI**: Sistema "natan" intuitivo
✅ **Routing dinámico**: Con parámetros y middleware
✅ **Helpers útiles**: Para desarrollo rápido
✅ **Sistema de caché**: Para rendimiento
✅ **Validación**: Para seguridad
✅ **Middleware**: Para funcionalidad transversal

**Diferenciadores clave de Laravel:**
- Estructura más simple y clara
- Separación explícita Web/API desde el diseño
- Core educativo y accesible
- Comando "natan" más intuitivo
- Organización por función, no por tipo de archivo

Es perfecto para:
- Aprender desarrollo de frameworks
- Proyectos educativos
- Aplicaciones pequeñas a medianas
- Base para frameworks más complejos
- Entender arquitectura de frameworks modernos

**¡Framework PHP MVC completo con estructura innovadora y simple!** 🚀

POR FAVOR, implementa este framework completo siguiendo estas especificaciones exactas con la nueva estructura. Comienza con la estructura básica y el sistema de rutas.

================================================================================
                            FIN DEL DOCUMENTO V2
================================================================================